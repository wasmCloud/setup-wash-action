name: "setup-wash-action"
description: "GitHub Action to install the wash CLI for wasmCloud development."
author: "wasmCloud"

branding:
  icon: "cloud-drizzle"
  color: "green"

# Define your inputs here.
inputs:
  wash-version:
    description: "The version of wash to install (default: latest), Examples: 0.51, 0.51.1, ^0.51, ~0.51, wash-v1.0.0-beta.9, latest"
    required: false
    default: "wash-v1.0.0-beta.10"
  plugins:
    description: "Comma-delimited list of plugin URIs to install (e.g., 'ghcr.io/wasmcloud/wash-plugin:latest,ghcr.io/example/other-plugin:v1.0')"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Install wasm32-wasip2 target for Rust
      shell: bash
      run: |
        rustup target add wasm32-wasip2

    - name: Cache wash CLI
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # 4.3.0
      id: wash-cache
      with:
        path: |
          ${{ runner.tool_cache }}/wash/${{ inputs.wash-version }}
        key: wash-${{ runner.os }}-${{ runner.arch }}-${{ inputs.wash-version }}

    - name: Install wash CLI (Unix)
      shell: bash
      if: steps.wash-cache.outputs.cache-hit != 'true' && runner.os != 'Windows'
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        set -euo pipefail

        wash_version="${{ inputs.wash-version }}"
        wash_cache_dir="${RUNNER_TOOL_CACHE}/wash/${wash_version}"

        echo "Installing wash ${wash_version}"

        # Install wash using the official install script with verification
        export WASH_VERSION="${wash_version}"
        curl -sSL https://raw.githubusercontent.com/wasmcloud/wash/main/install.sh | bash -s -- -v

        # Add to tool cache
        mkdir -p "${wash_cache_dir}"
        cp ./wash "${wash_cache_dir}/wash"
        chmod +x "${wash_cache_dir}/wash"

        echo "wash installed and cached successfully"

    - name: Install wash CLI (Windows)
      shell: pwsh
      if: steps.wash-cache.outputs.cache-hit != 'true' && runner.os == 'Windows'
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        $ErrorActionPreference = 'Stop'

        $wash_version = "${{ inputs.wash-version }}"
        $wash_cache_dir = "$env:RUNNER_TOOL_CACHE\wash\$wash_version"

        Write-Host "Installing wash $wash_version"

        # Install wash using the official PowerShell install script with verification
        $env:WASH_VERSION = $wash_version
        $installScript = Invoke-WebRequest -Uri "https://raw.githubusercontent.com/wasmcloud/wash/main/install.ps1" -UseBasicParsing
        Invoke-Expression "& { $($installScript.Content) } -Verify"

        # Add to tool cache
        New-Item -ItemType Directory -Force -Path $wash_cache_dir | Out-Null
        Copy-Item -Path ".\wash.exe" -Destination "$wash_cache_dir\wash.exe"

        Write-Host "wash installed and cached successfully"

    - name: Add wash to PATH
      shell: bash
      if: runner.os != 'Windows'
      run: |
        wash_version="${{ inputs.wash-version }}"
        wash_cache_dir="${RUNNER_TOOL_CACHE}/wash/${wash_version}"
        echo "${wash_cache_dir}" >> $GITHUB_PATH

    - name: Add wash to PATH (Windows)
      shell: pwsh
      if: runner.os == 'Windows'
      run: |
        $wash_version = "${{ inputs.wash-version }}"
        $wash_cache_dir = "$env:RUNNER_TOOL_CACHE\wash\$wash_version"
        Add-Content -Path $env:GITHUB_PATH -Value $wash_cache_dir

    - name: Get wash plugin directory
      shell: bash
      if: ${{ inputs.plugins != '' }}
      id: wash-plugin-dir
      run: |
        plugin_dir=$(wash config info -o json | jq -r '.data.plugin_dir')
        echo "plugin_dir=$plugin_dir" >> $GITHUB_OUTPUT

    - name: Cache wash plugins
      uses: actions/cache@v4
      if: ${{ inputs.plugins != '' }}
      with:
        path: |
          ${{ steps.wash-plugin-dir.outputs.plugin_dir }}
        key: wash-plugins-${{ hashFiles('**/action.yml') }}-${{ inputs.plugins }}
        restore-keys: |
          wash-plugins-${{ hashFiles('**/action.yml') }}-

    - name: Install wash plugins
      shell: bash
      if: ${{ inputs.plugins != '' }}
      run: |
        set -euo pipefail

        plugins_input="${{ inputs.plugins }}"

        # Split comma-delimited list into array
        IFS=',' read -ra PLUGIN_URIS <<< "$plugins_input"

        for plugin_uri in "${PLUGIN_URIS[@]}"; do
          plugin_uri="$(echo "$plugin_uri" | xargs)"  # Trim whitespace
          [ -z "$plugin_uri" ] && continue
          echo "Installing plugin: $plugin_uri"
          plugin_name="${plugin_uri##*/}"
          plugin_name="${plugin_name%%:*}"
          if ! wash plugin list | grep -q -- "$plugin_name"; then
            wash plugin install "$plugin_uri"
          else
            echo "Plugin $plugin_name already installed, skipping"
          fi
        done
